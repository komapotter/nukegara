on:
  push:
    branches:
      - master
    paths-ignore:
      - 'ecs/**'
      - 'aks/**'
      - 'kind/**'

name: Deploy to Amazon ECS

env:
  ECSPRESSO_VER: v0.17.1

jobs:
  build:
    name: Build
    runs-on: ubuntu-18.04
    timeout-minutes: 300

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY_BUILDER: nukegara-builder
        ECR_REPOSITORY_RUNNER: nukegara
        IMAGE_TAG_LONG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        IMAGE_TAG=created-$(echo $IMAGE_TAG_LONG | cut -c 1-7)
        echo "pulling $ECR_REGISTRY/$ECR_REPOSITORY_BUILDER"
        docker pull $ECR_REGISTRY/$ECR_REPOSITORY_BUILDER:latest || true
        echo "pulling $ECR_REGISTRY/$ECR_REPOSITORY_RUNNER"
        docker pull $ECR_REGISTRY/$ECR_REPOSITORY_RUNNER:latest || true
        echo "building $ECR_REGISTRY/$ECR_REPOSITORY_BUILDER"
        DOCKER_BUILDKIT=1 docker build --target=builder --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $ECR_REGISTRY/$ECR_REPOSITORY_BUILDER -t $ECR_REGISTRY/$ECR_REPOSITORY_BUILDER:latest .
        echo "building $ECR_REGISTRY/$ECR_REPOSITORY_RUNNER"
        DOCKER_BUILDKIT=1 docker build --target=runner --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $ECR_REGISTRY/$ECR_REPOSITORY_BUILDER --cache-from $ECR_REGISTRY/$ECR_REPOSITORY_RUNNER -t $ECR_REGISTRY/$ECR_REPOSITORY_RUNNER:latest -t $ECR_REGISTRY/$ECR_REPOSITORY_RUNNER:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BUILDER
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_RUNNER
        echo "$ECR_REGISTRY/$ECR_REPOSITORY_RUNNER:$IMAGE_TAG" > image-url.txt

    - name: Upload image url
      uses: actions/upload-artifact@v2
      with:
        name: buildinfo
        path: image-url.txt

    - name: Job Result
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,ref
        author_name: Build
        mention: here
        if_mention: failure,cancelled
        channel: '#deploy'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-18.04
    timeout-minutes: 300

    steps:
    - name: setup tool
      id: setup-tool
      run: |
        pwd
        curl -L -o /tmp/ecspresso https://github.com/kayac/ecspresso/releases/download/${{ env.ECSPRESSO_VER }}/ecspresso-${{ env.ECSPRESSO_VER }}-linux-amd64
        chmod +x /tmp/ecspresso

    - name: Download image url
      uses: actions/download-artifact@v2
      with:
        name: buildinfo
        path: buildinfo

    - name: Build Information
      id: build-info
      run: |
        export IMAGE_URL=`cat buildinfo/image-url.txt`
        echo "::set-output name=image_url::${IMAGE_URL}"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

#    - name: Run ECS Task
#      id: run-task
#      env:
#        IMAGE_TAG: ${{ steps.build-image.outputs.image_tag }}
#      run: |
#        cd ecspresso && /tmp/ecspresso run --config config.yaml --task-def=ecs-run-task.json 

    - name: Fetch ECS Settings
      id: fetch-ecs-settings
      run: |
        /tmp/ecspresso init --region ap-northeast-1 --cluster nukegara-cluster --service nukegara --config config.yaml

    - name: render task definition
      id: render-app-container
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ecs-task-def.json
        container-name: app
        image: ${{ steps.build-info.outputs.image_url }}

    - name: Overwrite task definisions
      id: overwrite-task-definitions
      run: |
        cat ${{ steps.render-app-container.outputs.task-definition }} > ecs-task-def.json
        cat ecs-task-def.json

    - name: Deploy ECS Service
      id: deploy-service
      env:
        IMAGE_TAG: ${{ steps.build-image.outputs.image_tag }}
      run: |
        /tmp/ecspresso deploy --config config.yaml --rollback-events DEPLOYMENT_FAILURE

    - name: Job Result
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,ref
        author_name: Deploy
        mention: here
        if_mention: failure,cancelled
        channel: '#deploy'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
