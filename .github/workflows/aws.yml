# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, on every push
# to the master branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

on:
  push:
    branches:
      - master

name: Deploy to Amazon ECS

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-18.04
    timeout-minutes: 300

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: setup tool
      id: setup-tool
      run: |
        pwd
        curl -L -o /tmp/ecspresso https://github.com/kayac/ecspresso/releases/download/v0.13.3/ecspresso-v0.13.3-linux-amd64
        chmod +x /tmp/ecspresso

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY_BUILDER: nukegara-builder
        ECR_REPOSITORY_RUNNER: nukegara
        IMAGE_TAG_LONG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        IMAGE_TAG=$(echo $IMAGE_TAG_LONG | cut -c 1-7)
        echo "pulling $ECR_REGISTRY/$ECR_REPOSITORY_BUILDER"
        docker pull $ECR_REGISTRY/$ECR_REPOSITORY_BUILDER:latest || true
        echo "pulling $ECR_REGISTRY/$ECR_REPOSITORY_RUNNER"
        docker pull $ECR_REGISTRY/$ECR_REPOSITORY_RUNNER:latest || true
        echo "building $ECR_REGISTRY/$ECR_REPOSITORY_BUILDER"
        docker build --target=builder --cache-from $ECR_REGISTRY/$ECR_REPOSITORY_BUILDER -t $ECR_REGISTRY/$ECR_REPOSITORY_BUILDER:latest .
        echo "building $ECR_REGISTRY/$ECR_REPOSITORY_RUNNER"
        docker build --target=runner --cache-from $ECR_REGISTRY/$ECR_REPOSITORY_BUILDER --cache-from $ECR_REGISTRY/$ECR_REPOSITORY_RUNNER -t $ECR_REGISTRY/$ECR_REPOSITORY_RUNNER:latest -t $ECR_REGISTRY/$ECR_REPOSITORY_RUNNER:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BUILDER
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_RUNNER
        echo "::set-output name=image_tag::$IMAGE_TAG"

    - name: Run ECS Task
      id: run-task
      env:
        IMAGE_TAG: ${{ steps.build-image.outputs.image_tag }}
      run: |
        cd ecspresso && /tmp/ecspresso run --config config.yaml --task-def=ecs-run-task.json 

    - name: Deploy ECS Service
      id: deploy-service
      env:
        IMAGE_TAG: ${{ steps.build-image.outputs.image_tag }}
      run: |
        cd ecspresso && /tmp/ecspresso deploy --config config.yaml

    - name: Job Result
      uses: 8398a7/action-slack@v2
      if: always()
      with:
        status: ${{ job.status }}
        author_name: Deploy
        only_mention_fail: here
        channel: '#deploy'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
